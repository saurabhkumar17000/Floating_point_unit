`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/08/2024 09:30:52 PM
// Design Name: 
// Module Name: ALU
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ALU(a,b,o,add_sub,mul,divide,z);
input [31:0] a;
input [31:0] b;
input [2:0]o;
output  [31:0] add_sub,mul,divide;
output z;
reg [31:0] ad,bd,am,bm,ac,bc,aas,bas;
always@(*)
begin
if(o==3'b000 || o==3'b001)
{aas,bas}={a,b};
else if(o==3'b010)
{am,bm}={a,b};
else if(o==3'b011)
{ad,bd}={a,b};
else
{ac,bc}={a,b};
end

add_sub as1(aas,bas,o,add_sub);
f_mult m1(am,bm,mul);
div_ie d1(ad,bd,divide);
comparator c1(ac,bc,z);
endmodule






// ADD_SUB
module add_sub(a,b,o,y);
input [31:0] a;
input [31:0] b;
input [2:0]o;
output reg [31:0] y;
reg [23:0]sv;
reg [24:0]as;
reg op;
reg [4:0]n;
reg [24:0]s;
integer i;
always@(*)
begin
  op=a[31]^b[31]^o[0];
  s=32'b1;
  if(a[30:23]>b[30:23])
  begin
   sv= {1'b1,b[22:0]} >> a[30:23]-b[30:23];
   as =op? {1'b1,a[22:0]}-sv :{1'b1,a[22:0]}+sv;
   y[31]=a[31];
   y[30:23]=a[30:23]+1-n;
   y[22:0]=as[23:1]<<n;
  end
  else if(b[30:23]>a[30:23])
  begin
   sv= {1'b1,a[22:0]} >> b[30:23]-a[30:23];
   as =op? {1'b1,b[22:0]}-sv :{1'b1,b[22:0]}+sv;
   y[31]=o[0]?~b[31]:b[31];
   y[30:23]=b[30:23]+1-n;
   y[22:0]=as[23:1]<<n;
  end
  else if(b[30:23]==a[30:23])
  begin
   if(a[22:0]>=b[22:0])
     begin
           as =op?{1'b1,a[22:0]}-{1'b1,b[22:0]}:{1'b1,a[22:0]}+{1'b1,b[22:0]};
           y[31]=a[31];
           y[30:23]=a[30:23]+1-n;
           y[22:0]=as[23:1]<<n;
     end
   else if(b[22:0]>a[22:0])
     begin
           as =op?{1'b1,b[22:0]}-{1'b1,a[22:0]}:{1'b1,b[22:0]}+{1'b1,a[22:0]};
           y[31]=o[0]?~b[31]:b[31];
           y[30:23]=b[30:23]+1-n;
           y[22:0]=as[23:1]<<n;
     end
  end
end
always@(*)
begin
    s=as;
    for(i=0;i<25;i=i+1)
     begin
        if(s[24-i]==1'b1)
        begin
        n=i;
        s=1'b0;
        end
     end
end
endmodule




//MULT
module f_mult(a,b,y);
input [31:0]a,b;
output reg [31:0]y;
reg [22:0]s;
reg [47:0]prod;
always@(*)
begin
prod={1'b1,a[22:0]}*{1'b1,b[22:0]};
y[31]=a[31]^b[31];
y[30:23]=a[30:23]+b[30:23]-127+prod[47];
y[22:0]=s;
end

always@(*)
begin
if(prod[47])
 s[22:0]=prod[46:24];

else 
 s[22:0]=prod[45:23];
end
endmodule




//Division
module div_ie(a,b,c);
input [31:0] a, b;
output reg [31:0] c;
reg sign, is_zero;
reg [7:0] exp, exp_c;
reg [22:0] mant;
wire [22:0]shifted;
wire [22:0]div;
wire [7:0] shift_index;
always@(*)
begin
        sign = a[31] ^ b[31];
        exp_c = a[30:23] - b[30:23] + {(7){1'b1}} + (23-5);
        is_zero = (a[30:0] == 'b0) ;
        exp = exp_c - shift_index;
        mant = shifted;
        c = is_zero ? 'b0 : {sign,exp,mant[22:0]};   
end
div_q div_inst({1'b1,a[22:0],{5{1'b0}}}, {1'b1,b[22:0]}, div);
mantshift mant_shifter(div, shifted, shift_index );
endmodule

module div_q(a, b, c );
input [46:0] a;
input [23:0] b;
output reg [5:0] c;
reg [46:0] a1;
reg [23:0] b1;
reg [5:0] i, p1;

always@(a,b) begin
    a1 = a; b1 = b;
    p1 = 'b0;
    for(i=1;i<63;i=i+1)
    begin
    if (a1 >= i*b1)
    p1 = i;
    end
    c = p1;
    end
endmodule

module mantshift(mant, shifted, shift_index );
input [23:0] mant;
output reg [7:0] shift_index;
output reg [23:0] shifted;
reg [23:0] target;
reg [4:0] cnt;
always@(mant) 
begin 
target = mant;
shift_index = 'b0;
for(cnt = 0; cnt < 24; cnt = cnt + 1)
begin
if (target[cnt]) 
shift_index = 23 - cnt;
end
shifted = mant << shift_index;
end
endmodule




//Comparator
module comparator(a,b,y);
input [31:0] a;
input [31:0] b;
output reg y;
reg [31:0] s;
reg [31:0] t;
integer i;

  always@(*)
  begin
  s=a;
  t=b;
    if(s[31]==1'b0 && t[31]==1'b1)
        y=1;
    else if(s[31]==1'b1 && t[31]==1'b0)
        y=0;
    else
      begin
        for(i=0;i<31;i=i+1)
        begin
           if(s[30-i]==1'b1 && t[30-i]==1'b0)
             begin
                y=a[31]?0:1;
                s=0;
                t=0;
             end   
            else if(s[30-i]==1'b0 && t[30-i]==1'b1)
             begin
                y=b[31]?1:0;
                s=0;
                t=0;
             end   
        end
      end
   end
endmodule
